* Instructions

Before anything, you need the environment variables PGUSER and PGPASSWORD (or any other variable if you want to use a non-default or a database located on a server) properly set

Then, you must create a database called "testbase"
#+BEGIN_SRC shell
createdb testbase
#+END_SRC

After that, run the SQL script to have the users table
#+BEGIN_SRC shell
psql -d testbase -f create_table.sql
#+END_SRC

Install the required libraries with
#+BEGIN_SRC shell
opam install eliom postgresql sha batteries
#+END_SRC

And then you can call
#+BEGIN_SRC shell
make test.byte
#+END_SRC

To start the server

* Some considerations
** Macaque
   Although it wasn't in the specification, I wanted to use macaque to produce and execute my SQL queries, so I could be sure the queries produced would be valid. ButI couldn't get macaque to work. I tried two different projects (one using the ppx extensions by default, the other using camlp4 by default), and couldn't get the syntax extension to work in neither of them. So, I used the postgresql-ocaml package.
   Because of that, the UserController is a functor. This way, the caller has the power to define which database library to use by simply providing a module with the correct signature.
** Database support
   Migrations need to be implement. Really. Even if migrations are written in SQL. It's too bad to have a database and not have an automated way to load changes that were still not applied. Most popular frameworks for popular languages implement some sort of migration, it's a shame that database support in Ocsigen seems to be so lacking.
** Shared reactive signals
   They would probably be the proper way to check for an existing username, but given the timespan I couldn't get to learn them. The local signal for the username value should be compared to a server signal that compares the value in a query, producing a shared boolean signal that informs whether the user exists. This shared signal would then generate the message and disable the button.
** Reactive programming support
   I had to repeat some code to take the values from the inputs as signals, because when I encapsulated the code to a function I couldn't compile the project. I need to investigate the exact reasons.
** Personal opinion
   Ocsigen has some excelent ideas, but I personally prefer the following Haskell stack to accomplish equivalent things
*** Servant
    Servant is the server-side library. It provides a similar concept to Ocsigen's type-safe links, but in a simpler fashion: the whole routes of the application are represented as a type. The application, to be considered valid, must implement this type, and every link must follow to a valid path on this type.
    An advantage of this (besides being terser) is that the documentation of the API is generated by implementing a single typeclass for this big type. The documentation generated is then well-formed and will describe every single route and parameter from the API
*** GHCJS
    GHCJS is equivalent to js_of_ocaml: it has the entire power of GHC, compiled to JavaScript. As js_of_ocaml, only C bindings can't be used by GHCJS code.
*** Reflex
    Reflex is a FRP library, with a framework (called reflex-dom) that defines the whole DOM as a reactive signal. Its approach tends to be simpler than Ocsigen's four ways to generate a properly formed HTML, and it's also usually terser to define signals and events (even recursive ones, which I didn't find a way to do in Ocsigen).
*** Opaleye
    Opaleye replaces macaque. It has a similar proposal: it is an EDSL that generates well-formed SQL for Postgresql. But there are two big advantages on its approaches:
    + It uses a syntax sugar built into the compiler, the ArrowSyntax
    + The queries are composable, unlike macaque's
*** Disadvantages
    The two disadvantages I see on this stack in relation to ocsigen are:
    + The front-end and backend do not directly share code, they must be completely different modules because they use different compilers. Code is shared by having modules that are compiled by both compilers
    + There's no easy way to share runtime values between frontend and backend. They must be implemented "by hand" using websockets (if it's done in real time), or fetched with HTTP requests.
*** Advantages
    + Haskell's community is usually more active
    + The libraries are usually better documented
    + The advantages already mentioned above
